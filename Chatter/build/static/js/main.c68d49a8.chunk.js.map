{"version":3,"sources":["components/jumbo/assets/image.jpg","components/cards/assets/610741220.0.jpg","components/navigation/index.js","components/jumbo/index.js","components/cards/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","props","react_default","a","createElement","className","Jumbo","react","news","Title","Author","Date","DatePublished","toDateString","src","ImageUrl","alt","Card","item","SourceName","Footer","getFullYear","App","state","Description","Url","_this2","this","fetch","then","response","json","setState","components_navigation","components_jumbo","slice","map","components_cards","key","index","components_footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8KCmBzBC,SAfI,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,eCWGC,eAdD,SAAAL,GAAK,OACfC,EAAAC,EAAAC,cAACG,EAAA,SAAD,KACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAW,SACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAW,WAAYJ,EAAMO,KAAKC,OACrCP,EAAAC,EAAAC,cAAA,QAAMC,UAAW,SAAUJ,EAAMO,KAAKE,OAAtC,MAAiD,IAAIC,KAAKV,EAAMO,KAAKI,eAAeC,iBAExFX,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMO,KAAKO,SAAUC,IAAK,cCKjCC,eAZF,SAAAhB,GAAK,OAEdC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QACZH,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMiB,KAAKH,SAAUC,IAAK,cACpCd,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAW,UAAWJ,EAAMiB,KAAKC,YACpCjB,EAAAC,EAAAC,cAAA,SAAIH,EAAMiB,KAAKT,OACfP,EAAAC,EAAAC,cAAA,KAAGC,UAAW,UAAd,MAA2BH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,eAAgBJ,EAAMiB,KAAKR,QAAvE,MAAyF,IAAIC,KAAKV,EAAMiB,KAAKN,eAAeC,oBCFzHO,SANA,SAAAnB,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACZH,EAAAC,EAAAC,cAAA,uCAAgC,IAAIO,MAAOU,kBCyCpCC,6MAvCXC,MAAQ,CACJf,KAAM,CACF,CACIW,WAAc,GACdT,OAAU,GACVD,MAAS,GACTe,YAAe,GACfC,IAAO,GACPV,SAAY,GACZH,cAAiB,yFAKT,IAAAc,EAAAC,KAChBC,MAAM,mCACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIL,EAAKM,SAAS,CAAExB,KAAMuB,uCAKxC,OACI7B,EAAAC,EAAAC,cAACG,EAAA,SAAD,KACIL,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAO1B,KAAMmB,KAAKJ,MAAMf,KAAK,KAC7BN,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eAEZsB,KAAKJ,MAAMf,KAAK2B,MAAM,GAAGC,IAAI,SAAAlB,GAAI,OAC7BhB,EAAAC,EAAAC,cAACiC,EAAD,CAAMC,IAAKpB,EAAKqB,MAAOrB,KAAMA,MAGrChB,EAAAC,EAAAC,cAACoC,EAAD,eAjCEC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.c68d49a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.2979f5a6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/610741220.0.49174f2f.jpg\";","import React from 'react';\r\nimport './styles/navigation.scss';\r\n// import img from './assets/search.png';\r\n\r\nconst Navigation = props => (\r\n    <div className=\"nav\">\r\n        <ul>\r\n            <li className=\"app-logo\">Chatter</li>\r\n            {/*<li>*/}\r\n                {/*<div className=\"search-bar\">*/}\r\n                    {/*<input type={\"text\"} placeholder=\"search news\"/>*/}\r\n                    {/*<input type={\"image\"} className={\"search-logo\"} src={img} alt={\"search-logo\"}/>*/}\r\n                {/*</div>*/}\r\n\r\n            {/*</li>*/}\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Navigation;","import React, {Fragment} from 'react';\r\nimport './styles/jumbo.scss'\r\nimport img from './assets/image.jpg';\r\n\r\nconst Jumbo = props => (\r\n    <Fragment>\r\n        <div className={\"jumbo\"}>\r\n            <div className={\"gradient\"}>\r\n                <p className={\"caption\"}>{props.news.Title}</p>\r\n                <span className={\"span1\"}>{props.news.Author} | {new Date(props.news.DatePublished).toDateString()}</span>\r\n            </div>\r\n            <img src={props.news.ImageUrl} alt={\"jumbo\"}/>\r\n        </div>\r\n\r\n    </Fragment>\r\n\r\n);\r\n\r\nexport default Jumbo;","import React from 'react';\r\nimport './styles/cards.scss'\r\nimport img from './assets/610741220.0.jpg'\r\n\r\nconst Card = props => (\r\n\r\n    <div className={\"Card\"}>\r\n        <img src={props.item.ImageUrl} alt={\"news-logo\"}/>\r\n        <div>\r\n            <p className={\"source\"}>{props.item.SourceName}</p>\r\n            <p>{props.item.Title}</p>\r\n            <p className={\"author\"}>By <span className={\"author-name\"}>{props.item.Author}</span> | {new Date(props.item.DatePublished).toDateString()}</p>\r\n        </div>\r\n\r\n    </div>\r\n);\r\nexport default Card;","import React from 'react';\r\nimport './styles/footer.scss'\r\n\r\nconst Footer = props => (\r\n    <div className={\"footer\"}>\r\n        <p>An Eduvie Production &copy; {new Date().getFullYear()}</p>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React, {Component, Fragment} from 'react';\r\nimport Navigation from './components/navigation';\r\nimport Jumbo from \"./components/jumbo\";\r\nimport Card from \"./components/cards\";\r\nimport Footer from \"./components/footer\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        news: [\r\n            {\r\n                \"SourceName\": \"\",\r\n                \"Author\": \"\",\r\n                \"Title\": \"\",\r\n                \"Description\": \"\",\r\n                \"Url\": \"\",\r\n                \"ImageUrl\": \"\",\r\n                \"DatePublished\": \"\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://localhost:51563/api/news\")\r\n            .then(response => response.json())\r\n            .then(json => this.setState({ news: json }));\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <Navigation/>\r\n                <Jumbo news={this.state.news[0]}/>\r\n                <div className={\"card-parent\"}>\r\n                {\r\n                    this.state.news.slice(1).map(item => (\r\n                        <Card key={item.index} item={item}/>\r\n                    ))\r\n                }\r\n                <Footer/>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}